{"version":3,"sources":["components/card/card-component.jsx","components/card-list/card-list-component.jsx","components/search-box/search-box-component.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","alt","src","master","name","email","CardList","console","log","map","key","id","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchFeild","target","value","state","bind","this","filterMaster","filter","toLowerCase","includes","toLocaleLowerCase","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"uVAEaA,G,MAAO,SAACC,GAAD,OAChB,yBAAKC,UAAU,kBACX,yBAAKC,IAAI,SAASC,IAAI,oCACrB,4BAAKH,EAAMI,OAAOC,MACf,2BAAIL,EAAMI,OAAOE,UCDhBC,G,MAAW,SAAAP,GAEpB,OADAQ,QAAQC,IAAIT,GACJ,yBAAKC,UAAU,aAClBD,EAAMI,OAAOM,KAAI,SAAAN,GAAM,OACxB,kBAAC,EAAD,CAAMO,IAAKP,EAAOQ,GAAIR,OAAQA,UCNxBS,G,MAAY,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAaC,EAAf,EAAeA,aAAf,OACtB,2BAAOC,KAAK,SACZf,UAAU,SACRa,YAAaA,EACbG,SAAWF,MC0FFG,G,wDA1Fb,aAAc,IAAD,8BACX,gBAqDFH,aAAe,SAACI,GACd,EAAKC,SAAS,CAACC,YAAaF,EAAEG,OAAOC,SAjDrC,EAAKC,MAAM,CACTpB,OAAO,CACL,CACEC,KAAK,QACLC,MAAM,kBACNM,GAAI,KAEN,CACEP,KAAK,QACLC,MAAM,kBACNM,GAAI,KAEN,CACEP,KAAK,QACLC,MAAM,kBACNM,GAAI,KAEN,CACEP,KAAK,QACLC,MAAM,kBACNM,GAAI,KAEN,CACEP,KAAK,QACLC,MAAM,kBACNM,GAAI,KAEN,CACEP,KAAK,QACLC,MAAM,kBACNM,GAAI,KAEN,CACEP,KAAK,QACLC,MAAM,kBACNM,GAAI,KAEN,CACEP,KAAK,UACLC,MAAM,kBACNM,GAAI,MAGRS,YAAY,IAEd,EAAKN,aAAe,EAAKA,aAAaU,KAAlB,gBAnDT,E,qDA0DH,IAAD,EACuBC,KAAKF,MAA5BpB,EADA,EACAA,OAAQiB,EADR,EACQA,YACTM,EAAevB,EAAOwB,QAAO,SAAAxB,GAAM,OAAIA,EAAOC,KAAKwB,cAAcC,SAAST,EAAYU,wBAC5F,OACA,yBAAK9B,UAAU,OACb,wDASA,kBAAC,EAAD,CACAa,YAAY,gBACZC,aAAcW,KAAKX,eAEnB,6BAdF,IAcS,6BACX,kBAAC,EAAD,CAAUX,OAAQuB,S,GA9EFK,cCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL1C,QAAQ0C,MAAMA,EAAMC,c","file":"static/js/main.fd179e88.chunk.js","sourcesContent":["import React from 'react';\r\nimport '../card/card-style.css';\r\nexport const Card = (props) => (\r\n    <div className='card-container'>\r\n        <img alt='master' src='https://robohash.org/1?set=set1' />\r\n         <h1>{props.master.name}</h1>\r\n            <p>{props.master.email}</p>\r\n    </div>\r\n)","import React from 'react';\r\nimport {Card} from '../card/card-component';\r\nimport './card-list-style.css'\r\n\r\n\r\nexport const CardList = props => {\r\n    console.log(props);\r\n    return (<div className='card-list'>\r\n        {props.master.map(master => (\r\n        <Card key={master.id} master={master} />\r\n      ))}\r\n    </div>)\r\n};","import React from 'react';\r\nimport '../search-box/search-box-style.css';\r\n\r\nexport  const SearchBox = ({placeholder, handleChange}) => (\r\n    <input type='search' \r\n    className='search'\r\n      placeholder={placeholder}\r\n      onChange= {handleChange} /> \r\n)","import React, { Component } from 'react';\nimport {CardList} from './components/card-list/card-list-component';\nimport {SearchBox} from '../src/components/search-box/search-box-component';\nimport './App.css';\n\n\nclass App extends Component{\n  constructor(){\n    super ();\n    // this.state = {\n    //   string: 'Hello Dastagiri, How are you man ?',\n    //   string2: 'Hello Giri'\n    // };\n    this.state={\n      master:[\n        {\n          name:\"Giri1\",\n          email:\"giri1@gmail.com\",\n          id: '1'\n        },\n        {\n          name:\"Giri2\",\n          email:\"giri2@gmail.com\",\n          id: '2'\n        },\n        {\n          name:\"Giri3\",\n          email:\"giri3@gmail.com\",\n          id: '3'\n        },\n        {\n          name:\"Giri4\",\n          email:\"giri4@gmail.com\",\n          id: '4'\n        },\n        {\n          name:\"Giri5\",\n          email:\"giri5@gmail.com\",\n          id: '5'\n        },\n        {\n          name:\"Giri6\",\n          email:\"giri6@gmail.com\",\n          id: '6'\n        },\n        {\n          name:\"Giri7\",\n          email:\"giri7@gmail.com\",\n          id: '7'\n        },\n        {\n          name:\"reshma8\",\n          email:\"giri8@gmail.com\",\n          id: '8'\n        }\n      ],\n      searchFeild:''\n    };\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange = (e) => {\n    this.setState({searchFeild: e.target.value});\n  }\n\n  render() {\n    const {master, searchFeild} = this.state;\n    const filterMaster = master.filter(master => master.name.toLowerCase().includes(searchFeild.toLocaleLowerCase()))\n    return(\n    <div className=\"App\">\n      <h1>React Master Rolodex APP</h1>\n      {/* <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n    <h3>{this.state.string}{this.state.string2}</h3>\n         <button onClick={() => this.setState({string: 'I am Good man, How about you ?', string2: 'This is Giri'})}>Change Text</button>\n      </header> */}\n      <SearchBox \n      placeholder='search master'\n      handleChange={this.handleChange}\n      />\n      <br /> <hr />\n  <CardList master={filterMaster} />\n      \n  \n    {/* <div>\n      {this.state.master.map(master => (\n        <h1 key={master.id}>{master.name}</h1>\n      ))}\n      \n    </div> */}\n    </div>)\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}